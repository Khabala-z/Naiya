// assets/js/app.js - L√≥gica Principal para Naiya PWA

// ===========================================
// 1. CONFIGURACI√ìN DE GEMINI Y VARIABLES GLOBALES
// ===========================================
// CLAVE API: Reemplaza con tu clave real.
const GEMINI_API_KEY = 'AIzaSyAJ_s0uxcvQmh5iTiLMiqMtNodbR4gqPqI'; 
const GEMINI_MODEL = 'gemini-2.5-flash'; 
const GEMINI_ENDPOINT = 'https://generativelanguage.googleapis.com/v1beta/models/' + GEMINI_MODEL + ':generateContent?key=' + GEMINI_API_KEY;

// Elementos del DOM para interacci√≥n
const navButtons = document.querySelectorAll('.app-navbar .nav-item');
const views = document.querySelectorAll('.app-content .view');
const btnEscribir = document.getElementById('btn-escribir');
const textInput = document.getElementById('text-input');
const btnHablar = document.getElementById('btn-hablar');
const btnCamara = document.getElementById('btn-camara');
const translationCard = document.querySelector('.translation-card .example');


// ===========================================
// 2. INICIALIZACI√ìN Y NAVEGACI√ìN
// ===========================================
document.addEventListener('DOMContentLoaded', () => {
    console.log('Naiya App: L√≥gica JavaScript cargada.');
    
    // Iniciar en la vista 'inicio'
    setActiveView('inicio');

    // Manejo de la navegaci√≥n (Men√∫ inferior)
    navButtons.forEach(button => {
        button.addEventListener('click', () => {
            const targetViewId = button.getAttribute('data-view');
            setActiveView(targetViewId);

            navButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
        });
    });

    /**
     * Muestra la vista objetivo y oculta las dem√°s.
     * @param {string} viewId - El ID de la secci√≥n (ej: 'inicio', 'comunidad').
     */
    function setActiveView(viewId) {
        views.forEach(view => {
            view.classList.remove('active');
            view.classList.add('hidden');
            if (view.id === viewId) {
                view.classList.remove('hidden');
                view.classList.add('active');
            }
        });
         // Asegurarse de que el input est√© oculto al cambiar de vista
        if (viewId !== 'inicio') {
            textInput.style.display = 'none';
        }
    }

    // ===========================================
    // 3. L√ìGICA DE INTERACCI√ìN Y TRADUCCI√ìN (IA)
    // ===========================================

    // Manejar el bot√≥n 'Escribir'
    btnEscribir.addEventListener('click', () => {
        const isHidden = textInput.style.display === 'none' || textInput.style.display === '';
        
        if (isHidden) {
            textInput.style.display = 'block';
            textInput.focus();
            btnEscribir.textContent = '‚úÖ Enviar Texto'; 
        } else {
            handleTranslation(textInput.value, 'texto'); // Llamada a traducci√≥n
            textInput.value = ''; 
            textInput.style.display = 'none';
            btnEscribir.textContent = 'üìù Escribir'; 
        }
    });

    // Manejar el bot√≥n 'Hablar' (Simulaci√≥n de Voz)
    btnHablar.addEventListener('click', () => {
        // SIMULACI√ìN: La IA transcribe la voz a texto
        const recognizedSpeech = prompt('üé§ SIMULACI√ìN VOZ: Introduce la frase que la persona dijo (Ej: I need help).');
        if (recognizedSpeech) {
            handleTranslation(recognizedSpeech, 'voz');
        } else {
            alert('Grabaci√≥n de voz cancelada.');
        }
    });

    // Manejar el bot√≥n 'C√°mara' (Simulaci√≥n de Se√±as)
    btnCamara.addEventListener('click', () => {
        // SIMULACI√ìN: La IA detecta la se√±a y la describe
        const detectedSign = prompt('üì∏ SIMULACI√ìN SE√ëAS: Escribe la se√±a detectada (Ej: "manos forman un coraz√≥n" o "se√±a de ayuda").');
        if (detectedSign) {
            handleTranslation(detectedSign, 'se√±as');
        } else {
            alert('Detecci√≥n de se√±as cancelada.');
        }
    });

    /**
     * Funci√≥n unificada de traducci√≥n que maneja Texto, Voz y Se√±as mediante Gemini.
     * @param {string} input - Texto, la frase reconocida (voz) o la descripci√≥n de la se√±a.
     * @param {string} type - Tipo de entrada: 'texto', 'voz' o 'se√±as'.
     */
    async function handleTranslation(input, type) {
        if (input.trim() === '') {
            return;
        }

        const sourceLabel = type === 'texto' ? 'T√∫ escribes' : type === 'voz' ? 'T√∫ hablas' : 'Se√±a detectada';
        
        const loadingMessage = document.createElement('p');
        loadingMessage.className = 'loading-ia';
        loadingMessage.innerHTML = `${sourceLabel}: **${input}** ‚Üí Naiya IA: ‚è≥ Traduciendo...`;
        translationCard.prepend(loadingMessage);

        // Ajustamos el prompt para ser m√°s descriptivo, especialmente con se√±as.
        const prompt = type === 'se√±as'
            ? `Soy un modelo de IA que detecta el lenguaje de se√±as. Traduce al espa√±ol lo que la se√±a "${input}" significa y responde √∫nicamente con la traducci√≥n.`
            : `Traduce y responde √∫nicamente con la traducci√≥n al espa√±ol, de forma concisa y natural: "${input}"`;

        try {
            const response = await fetch(GEMINI_ENDPOINT, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    contents: [{ role: "user", parts: [{ text: prompt }] }]
                })
            });

            const data = await response.json();
            
            // Verificaci√≥n b√°sica de la respuesta
            if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
                 throw new Error('Respuesta de la API incompleta o clave incorrecta.');
            }

            let translatedText = data.candidates[0].content.parts[0].text.trim();

            loadingMessage.remove(); 
            
            const newTranslation = document.createElement('p');
            newTranslation.innerHTML = `${sourceLabel}: "${input}" ‚Üí Naiya: <strong>${translatedText}</strong>`;
            
            if (translationCard.children.length >= 4) {
                translationCard.removeChild(translationCard.lastChild);
            }
            translationCard.prepend(newTranslation);

        } catch (error) {
            loadingMessage.innerHTML = `Naiya IA: ‚ùå Error de traducci√≥n. Revisa tu clave API o la conexi√≥n. Mensaje: ${error.message}`;
            console.error('Error al llamar a la API de Gemini:', error);
        }
    }


    // ===========================================
    // 4. L√ìGICA DE PWA (Service Worker)
    // ===========================================
    
    // Este c√≥digo se mantiene en index.html, solo se imprime el estado en app.js
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.getRegistration().then(registration => {
            if (registration) {
                console.log('PWA: Service Worker ya registrado.');
            }
        });
    }

});